---
title: "Week 8 eds 223"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## 1. Load libraries

```{r}
library(terra)
library(sf)
library(tidyverse)
library(here)
library(tmap)
```

## 2. Create a function to compute NDVI

```{r}
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}
```

## 3. Compute NDVI for a single scene

```{r}
# read in data
landsat_20180612 <- rast(here("data", "landsat_20180612.tif"))

# Rename bands
names(landsat_20180612) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")

# Apply function to the single raster, turning reflectance into NDVI
# applies function to each cell, using layers as arguments
ndvi_20180612 <- lapp(landsat_20180612[[c(4, 3)]], fun = ndvi_fun)
```

```{r}
tm_shape(ndvi_20180612) +
  tm_raster(title = "NDVI") +
  tm_layout(legend.outside = TRUE)
```

## Make a function
```{r}
rm(list = ls())  
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}
```

```{r}
#| eval: false
# NOTE: this code is not meant to run! 
# we're just outlining the function we want to create

create_ndvi_layer <- function(){
  # step 1: read scene
  landsat <- rast(file)
  # step 2: rename layer
  names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
  # step 3: compute NDVI
  ndvi <- lapp(landsat[[c(4, 3)]], fun = ndvi_fun)
  return(ndvi)
}

# What do we notice as what we need to pass into our function?
```

```{r}
files <- list.files(
  here("data"), pattern = "*.tif", 
  full.names = TRUE) # returns the full path to the file 
```

```{r}
create_ndvi_layer <- function(i){
  landsat <- rast(files[i])
  names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
  ndvi <- lapp(landsat[[c(4, 3)]], fun = ndvi_fun)
  return(ndvi)
}
```

```{r}
test <- create_ndvi_layer(1)
```

```{r}
all_ndvi <- c(create_ndvi_layer(1), 
              create_ndvi_layer(2), 
              create_ndvi_layer(3), 
              create_ndvi_layer(4), 
              create_ndvi_layer(5), 
              create_ndvi_layer(6), 
              create_ndvi_layer(7), 
              create_ndvi_layer(8))

names(all_ndvi) <- c("2018-06-12", 
                    "2018-08-15", 
                    "2018-10-18", 
                    "2018-11-03", 
                    "2019-01-22", 
                    "2019-02-23", 
                    "2019-04-12", 
                    "2019-07-01")
```

```{r}
# Put file paths into df, use stringr to pull out just the dates
file_names <- data.frame(file_name = files) %>% 
  mutate(date = str_sub(file_name, start = -12L, end = -5L))

# Change names to match the date from the new df
names(all_ndvi) <- file_names$date
```

## Compare NDVI across vegetation communities
```{r}
sites <- st_read(here("data","study_sites.shp"))
```

```{r}
tm_shape(all_ndvi[[1]]) +
  tm_raster() +
  tm_shape(sites) +
  tm_polygons() +
  tm_layout(legend.show = FALSE)
```

## Extract NDVI at study sites
```{r}
sites_ndvi <- terra::extract(all_ndvi, sites, fun = "mean")

sites_annotated <- cbind(sites, sites_ndvi)
```

```{r}
sites_clean <- sites_annotated %>%
  # initial cleaning
  st_drop_geometry() %>% # drop geometry
  select(-ID) %>% # remove ID generated by terra::extract()
  # reformat data frame
  pivot_longer(!study_site) %>% # reshape data frame
  rename("NDVI" = value) %>% # assign "value" to NDVI
  # create date attribute
  mutate("year" = str_sub(name, 2, 5), # pull out elements of date
         "month" = str_sub(name, 7, 8),
         "day" = str_sub(name, -2, -1)) %>%
  unite("date", 4:6, sep = "-") %>% # combine date elements
  mutate("date" = lubridate::as_date(date)) %>%
  # rename combine study sites by vegetation type
  mutate("veg_type" = case_when(study_site == "forest1" ~ "forest",
                                study_site == "forest2" ~ "forest",
                                study_site == "forest3" ~ "forest",
                                study_site == "grassland" ~ "grassland",
                                study_site == "chaparral" ~ "chaparral")) %>%
  # summarize results by vegetation type
  group_by(veg_type, date) %>%
  summarize("NDVI" = mean(NDVI, na.rm = TRUE))
```

```{r}
ggplot(sites_clean,
       aes(x = date, y = NDVI,
           group = veg_type, col = veg_type)) +
  scale_color_manual(values = c("#EAAC8B", "#315C2B","#9EA93F")) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(x = "", y = "Normalized Difference Vegetation Index (NDVI)", col = "Vegetation type",
       title = "Seasonal cycles of vegetation productivity") 
```

